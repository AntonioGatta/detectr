// Generated by CoffeeScript 1.4.0

(function(window, document) {
  "use strict";

  /*
      String helper functions
  */

  var contains, defaultTests, detectCache, detectResultCache, detectr, globalOptions, runTest;
  contains = function(bigString, smallString) {
    if (String.prototype.contains) {
      return bigString.contains(smallString);
    } else {
      return !!~bigString.indexOf(smallString);
    }
  };
  /*
      Default configuration for detectr
  */

  defaultTests = {
    tests: {
      desktop: {
        run: function() {
          return !runTest('mobile');
        },
        result: 'desktop'
      },
      mobile: {
        run: function() {
          return runTest('android') || runTest('ios') || runTest('bada') || runTest('webos') || runTest('wp7') || runTest('blackberry');
        },
        result: 'mobile'
      },
      macosx: {
        run: function() {
          return contains(detectr.Browser.platform.name(), 'macosx');
        },
        result: 'macosx'
      },
      linux: {
        run: function() {
          return contains(detectr.Browser.platform.name(), 'linux');
        },
        result: 'linux'
      },
      windows: {
        run: function() {
          return contains(detectr.Browser.platform.name(), 'windows');
        },
        result: 'windows'
      },
      android: {
        run: function() {
          return contains(detectr.Browser.get(), 'android');
        },
        result: 'android'
      },
      ios: {
        run: function() {
          return runTest('ipod') || runTest('iphone') || runTest('ipad');
        },
        result: 'ios'
      },
      ipod: {
        run: function() {
          return contains(detectr.Browser.get(), 'ipod');
        },
        result: 'ipod'
      },
      iphone: {
        run: function() {
          return contains(detectr.Browser.get(), 'iphone');
        },
        result: 'iphone'
      },
      ipad: {
        run: function() {
          return contains(detectr.Browser.get(), 'ipad');
        },
        result: 'ipad'
      },
      bada: {
        run: function() {
          return contains(detectr.Browser.get(), 'bada');
        },
        result: 'bada'
      },
      webos: {
        run: function() {
          return contains(detectr.Browser.get(), 'webos');
        },
        result: 'webos'
      },
      wp7: {
        run: function() {
          return contains(detectr.Browser.get(), 'windows phone os');
        },
        result: 'wp7'
      },
      blackberry: {
        run: function() {
          return (contains(detectr.Browser.get(), 'rim')) || (contains(detectr.Browser.get(), 'blackberry'));
        },
        result: 'blackberry'
      },
      landscape: {
        run: function() {
          return detectr.Display.pageWidth() >= detectr.Display.pageHeight();
        },
        result: 'landscape'
      },
      portrait: {
        run: function() {
          return !runTest('landscape');
        },
        result: 'portrait'
      },
      'browser-chrome': {
        run: function() {
          return contains(detectr.Browser.get(), 'chrome');
        },
        result: 'browser-chrome'
      },
      'browser-firefox': {
        run: function() {
          return contains(detectr.Browser.get(), 'firefox');
        },
        result: 'browser-firefox'
      },
      'browser-ie': {
        run: function() {
          return contains(detectr.Browser.get(), 'msie');
        },
        result: 'browser-ie'
      },
      'browser-safari': {
        run: function() {
          return (contains(detectr.Browser.get(), 'safari')) && !(contains(detectr.Browser.get(), 'chrome'));
        },
        result: 'browser-safari'
      },
      'browser-opera': {
        run: function() {
          return contains(detectr.Browser.get(), 'opera');
        },
        result: 'browser-opera'
      }
    }
  };
  detectCache = {};
  detectResultCache = {};
  globalOptions = {};
  /*
      Runs a defined test
  */

  runTest = function(testName, testObject) {
    var htmlClassName, testResultBool, testResultString;
    if (!testName) {
      return void 0;
    }
    if (testObject) {
      if (testObject.run) {
        testResultBool = !!testObject.run();
        testResultString = testObject.result;
      }
      if ((globalOptions != null ? globalOptions.debug : void 0) != null) {
        console.log("Testing " + testName + ": Result: " + testResultBool);
      }
      detectCache[testName] = testResultBool;
      if (testResultBool) {
        htmlClassName = document.documentElement.className;
        htmlClassName += " " + testResultString;
        htmlClassName = htmlClassName.trim();
        document.documentElement.className = htmlClassName;
        detectResultCache[testName] = testResultString;
      }
    }
    return detectCache[testName];
  };
  /*
      detectr constructor
  */

  detectr = function(config, options) {
    var key, parsedPlatform, uaAppName, uaAppVersion, uaPlatform, uaString, value, _ref;
    if (!(config && config.tests)) {
      return void 0;
    }
    globalOptions = options;
    uaString = navigator.userAgent.toLowerCase();
    uaAppName = navigator.appName;
    uaAppVersion = navigator.appVersion;
    uaPlatform = navigator.platform;
    parsedPlatform = uaString.match(/(.*?)\s(.*?)\((.*?);\s(.*?)\)/);
    detectr.Browser || (detectr.Browser = {
      width: function() {
        return window.outerWidth;
      },
      height: function() {
        return window.outerHeight;
      },
      get: function() {
        return uaString;
      },
      name: function() {
        return uaAppName;
      },
      version: function() {
        return uaAppVersion;
      },
      platform: {
        name: function() {
          return parsedPlatform[4].replace(/\s/gi, '').toLowerCase();
        },
        original: function() {
          return uaPlatform;
        }
      },
      language: function() {
        var language;
        language = navigator.language || navigator.systemLanguage;
        if (language != null) {
          return language.split('-')[0];
        }
      }
    });
    document.documentElement.setAttribute('lang', detectr.Browser.language());
    detectr.Display || (detectr.Display = {
      width: function() {
        return window.screen.width;
      },
      height: function() {
        return window.screen.height;
      },
      pageWidth: function() {
        return window.innerWidth;
      },
      pageHeight: function() {
        return window.innerHeight;
      }
    });
    detectr.clear();
    _ref = config.tests;
    for (key in _ref) {
      value = _ref[key];
      detectr.add(key, value);
    }
    detectr.Display.orientation = detectResultCache['landscape'] || detectResultCache['portrait'];
    return detectr;
  };
  /*
      Checks for a test and returns a boolean value
  */

  detectr.is = function(value) {
    var result;
    if (!value) {
      return void 0;
    }
    value = value.replace(/\s/gi, '').toLowerCase();
    if (detectCache[value]) {
      return result = detectCache[value];
    }
  };
  /*
      Checks for a test and returns the result value of the test
  */

  detectr.result = function(value) {
    var result;
    if (!value) {
      return void 0;
    }
    value = value.replace(/\s/gi, '').toLowerCase();
    if (detectResultCache[value]) {
      return result = detectResultCache[value];
    }
  };
  /*
      Clear cache
  */

  detectr.clear = function() {
    var htmlClassName, key, value;
    detectCache = {};
    for (key in detectResultCache) {
      value = detectResultCache[key];
      htmlClassName = document.documentElement.className;
      htmlClassName = htmlClassName.replace(value, '').trim();
      document.documentElement.className = htmlClassName;
    }
    detectResultCache = {};
    return detectr;
  };
  /*
      Remove a test
  */

  detectr.remove = function(testName) {
    var htmlClassName;
    if (detectCache[testName]) {
      delete detectCache[testName];
    }
    if (detectResultCache[testName]) {
      htmlClassName = document.documentElement.className;
      htmlClassName = htmlClassName.replace(detectResultCache[testName], '').replace(/^\s+|\s+$/g, '').replace(/\s+/g, ' ');
      document.documentElement.className = htmlClassName;
      delete detectResultCache[testName];
    }
    return detectr;
  };
  /*
      Add a test
  */

  detectr.add = function(testName, testObject) {
    var key, value;
    if (testName.tests) {
      for (key in testName) {
        value = testName[key];
        detectr.add(key, value);
      }
    } else {
      runTest(testName, testObject);
    }
    return detectr;
  };
  /*
      Expose defaultTests for those who need re-execute the detectr function
  */

  detectr.defaultTests = defaultTests;
  /*
      Call detectr constructor with default configuration
      and set the reference to the detectr object
  */

  return window.detectr = detectr(defaultTests);
})(this, document);
